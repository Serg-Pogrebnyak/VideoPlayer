//
//  SyncMusicViewController.swift
//  VideoPlayer
//
//  Created by Sergey Pohrebnuak on 03.02.2021.
//  Copyright (c) 2021 Sergey Pohrebnuak. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Lottie

protocol SyncMusicDisplayLogic: class {
    func displaySomething(viewModel: SyncMusic.Something.ViewModel)
}

final class SyncMusicViewController: UIViewController {
    
    //MARK: Outlets
    @IBOutlet private weak var popUpContainerView: UIView!
    @IBOutlet private weak var generalLoadingAnimationView: AnimationView!
    @IBOutlet private weak var titleLabel: UILabel!
    @IBOutlet private weak var descriptionLabel: UILabel!
    @IBOutlet private weak var closeButton: UIButton!
    
    
    //MARK: Variables
    private var interactor: SyncMusicBusinessLogic?
    
    //MARK: Constants
    private let generalViewCornerRadius: CGFloat = 20
    private let animationSpeed: CGFloat = 1.5
    private let startLoadingFrame: CGFloat = 119
    private let endLoadingFrame: CGFloat = 238
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupCleanCycle()
        configureUI()
        startGeneralLoadingAnimation()
    }
    
    //MARK: Setup
    private func configureUI() {
        titleLabel.text = "Synchronization"
        descriptionLabel.text = "Application synchronize your media files"
        
        closeButton.setTitle("Close", for: .normal)
        ButtonFabric.makeBoldColorButton(closeButton)
        
        popUpContainerView.layer.cornerRadius = generalViewCornerRadius
        generalLoadingAnimationView.layer.cornerRadius = generalLoadingAnimationView.layer.bounds.width/2
    }
    
    private func setupCleanCycle() {
        let viewController = self
        let interactor = SyncMusicInteractor()
        let presenter = SyncMusicPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }
    
    //MARK: Animation functions
    private func startGeneralLoadingAnimation() {
        generalLoadingAnimationView.backgroundBehavior = .pauseAndRestore
        generalLoadingAnimationView.animationSpeed = animationSpeed
        generalLoadingAnimationView.play(fromFrame: startLoadingFrame,
                                         toFrame: endLoadingFrame,
                                         loopMode: .loop)
    }
}

extension SyncMusicViewController: SyncMusicDisplayLogic {
    func displaySomething(viewModel: SyncMusic.Something.ViewModel) {
    }
}
