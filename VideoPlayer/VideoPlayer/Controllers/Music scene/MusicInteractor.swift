//
//  MusicInteractor.swift
//  VideoPlayer
//
//  Created by Sergey Pohrebnuak on 13.01.2021.
//  Copyright (c) 2021 Sergey Pohrebnuak. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MusicBusinessLogic {
    func fetchLocalItems(request: Music.FetchLocalItems.Request)
    func startPlayOrDownload(request: Music.StartPlayOrDownload.Request)
}

protocol MusicDataStore {
    var itemsSet: Set<MusicOrVideoItem> {get}
}

class MusicInteractor: MusicBusinessLogic, MusicDataStore {
    
    var presenter: MusicPresentationLogic?
    
    private(set) var itemsSet = Set<MusicOrVideoItem>()
    private(set) var itemsArray = [MusicOrVideoItem]()
    private var fetchWorker: FetchFromLocalStorageWorker?
    private var playWorker: PlayMusicWorker?
    
    private let musicExtension = ".mp3"
    
    // MARK: Do something
    func fetchLocalItems(request: Music.FetchLocalItems.Request) {
        fetchWorker = FetchFromLocalStorageWorker()
        fetchWorker?.fetch(byTypeExtension: musicExtension)
        
        itemsSet = CoreManager.shared.getMediaItems()
        itemsArray = Array(itemsSet)
        
        let response = Music.FetchLocalItems.Response(musicItems: itemsArray)
        presenter?.showMusicItems(response: response)
    }
    
    func startPlayOrDownload(request: Music.StartPlayOrDownload.Request) {
        guard   !itemsArray.isEmpty,
                request.index >= 0,
                request.index < itemsArray.count
        else {return}
        
        let itemForPlay = itemsArray[request.index]
        
        guard FileManager.default.hasLocalFile(fileName: itemForPlay.fileName) else {
            //TODO: here should call worker which download items from cloud
            return
        }
        
        if itemForPlay.isNew {
            itemsArray[request.index].isNew = false
            saveChanges()
            let response = Music.StartPlayOrDownload.Response(musicItem: itemsArray[request.index],
                                                              atIndex: request.index)
            presenter?.unnewMusicItem(response: response)
        }
        
        let url = FileManager.default.tempDirectory.appendingPathComponent(itemForPlay.fileName,
                                                                           isDirectory: false)

        playWorker = PlayMusicWorker()
        guard playWorker?.playSongByURL(url: url) ?? false else {return}
        playWorker?.delegate = self
    }
    
    private func saveChanges() {
        CoreManager.shared.saveContext()
    }
}

extension MusicInteractor: PlayMusicWorkerDelegate {
    func didFinishPlaySong() {
        
    }
    
    func updatedPlayingState(state: PlayMusicWorker.PlayingState) {
        
    }
}
